name: CI/CD Pipeline

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production?'
        required: true
        default: 'no'
        type: choice
        options:
          - yes
          - no

env:
  COMMIT_SHA: ${{ github.sha }}

jobs:

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Run Unit Tests
        run: |
          cd app
          npm install
          npm test

  build-and-push:
    name: Build & Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Tag Image
        run: |
          cd app
          docker build -t bhagya925/app:${{ env.COMMIT_SHA }} .
          docker tag bhagya925/app:${{ env.COMMIT_SHA }} bhagya925/app:stable

      - name: Push Image
        run: |
          docker push bhagya925/app:${{ env.COMMIT_SHA }}
          docker push bhagya925/app:stable

 scan:
  name: Vulnerability Scan
  needs: build-and-push
  runs-on: ubuntu-latest
  steps:
    - name: Scan Docker Image
      uses: aquasecurity/trivy-action@v0.28.0
      with:
        image-ref: bhagya925/app:${{ env.COMMIT_SHA }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  deploy-staging:
    name: Deploy to Staging EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker pull bhagya925/app:${{ env.COMMIT_SHA }}
            docker stop myapp || true
            docker rm myapp || true
            docker run -d -p 80:80 \
              -e NODE_ENV=production \
              -e PORT=80 \
              -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
              -e API_KEY=${{ secrets.API_KEY }} \
              --name myapp bhagya925/app:${{ env.COMMIT_SHA }}

  approve-prod:
    name: ‚è∏ Manual Approval for Production
    needs: deploy-staging
    if: ${{ github.event.inputs.deploy == 'yes' }}
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://your-production-url.com
    steps:
      - name: Manual Approval Step
        run: echo "Production approved, proceeding."

      - name: Deploy to Production (placeholder)
        run: echo "Add production deployment logic here"

  post-deploy:
    name: Post Deployment Cleanup
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Docker
        run: |
          docker image prune -f
          docker container prune -f

  notify:
    name: Failure Notification
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Failure Alert
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}